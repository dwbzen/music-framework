## ---------------------------------------------------------------------------
## config.properties
## score configuration
## XML comments are for Sibelius MusicXML export/import
## Instrument definition & configuration in orchestra.properties
## ---------------------------------------------------------------------------
##
## General Configuration
copywriteNotice=Copyright (C) 2020 Donald W. Bacon
creator.composer=Donald W. Bacon
creator.lyricist=NONE
creator.arranger=NONE

##
## Score properties
##
score.title=Pentatonic Minor
score.opus=2020.10.01
score.name=Quick Start
##
## instrument names in order: Flute,Oboe,Clarinet,Bassoon,Violin,Viola,Cello,DoubleBass
## String quartet: Violin,Violin2,Viola,Cello
## Wind quartet: Flute,Oboe,Clarinet,Bassoon
## Japanese: Koto,Shakuhachi,PianoLH,PianoRH
## Shakuhachi,WoodBlocks,SnareDrum,Xylophone,Koto,Timpani,DoubleBass
## Xylophone,WoodBlocks,Cymbals,SnareDrum,Timpani
## names must be unique!
## Instruments defined & configured in orchestra.properties
## score.instruments=Flute,Koto,TaishoKoto
score.instruments=BassClarinet,Clarinet,Flute

## the part name for each instrument is also the assigned queue
score.parts.PianoLH.partName=PianoLH
score.parts.PianoRH.partName=PianoRH
score.parts.PianoLHChords.partName=PianoLHChords
score.parts.PianoRHChords.partName=PianoRHChords

score.parts.Flute.partName=Flute
score.parts.Clarinet.partName=Clarinet
score.parts.Clarinet2.partName=Clarinet2
score.parts.Flute2.partName=Flute2
score.parts.Oboe.partName=Oboe
score.parts.Bassoon.partName=Bassoon

score.parts.Violin.partName=Violin
score.parts.Violin2.partName=Violin2
score.parts.Viola.partName=Viola
score.parts.Cello.partName=Cello
score.parts.DoubleBass.partName=DoubleBass

score.parts.Soprano.partName=Soprano
score.parts.Alto.partName=Alto
score.parts.Tenor.partName=Tenor
score.parts.Bass.partName=Bass

score.parts.Shakuhachi.partName=Shakuhachi
score.parts.Koto.partName=Koto
score.parts.TaishoKoto.partName=TaishoKoto
score.parts.Shamisen.partName=Shamisen

score.parts.Trombone.partName=Trombone

score.parts.Timpani.partName=Timpani
score.parts.Xylophone.partName=Xylophone
score.parts.Xylophone2.partName=Xylophone2
score.parts.Cymbals.partName=Cymbals
score.parts.SnareDrum.partName=SnareDrum
score.parts.WoodBlocks.partName=WoodBlocks
score.parts.Cowbell.partName=Cowbell

## 
## number of divisions (units) per measure
## this setting needs to match the root #units in the RhythmScale
## and be consistent with the score.timeSignature, typically 4/4
## 
score.measure.divisions=480

## Set on the command line. selectionMode :: random | sequential
selectionMode=random
## Set on the command line. -measures 20
measures=20

## initial tempo and key
score.tempo=90
score.key=C-Major
score.timeSignature=4/4
score.timeSignature.beatsPerMeasure=4
score.timeSignature.noteThatGetsTheBeat=4

##
## RhythmScales - specify the name.
## These are declared in util.music.RhythmScaleFactory RHYTHM_SCALE_FACTORY_NAMES
## Monophonic16StandardRhythmScale, StandardRhythmScale, PolyphonicRhythmScale
## The rhythm scale specified by score.rhythmScale.all is the default for all instruments
## Rhythm scale for specific instruments specified as score.rhythmScale.instrument.<instrument name>
##
score.rhythmScale.all=StandardRhythmScale
score.rhythmScale.instrument.PianoLHChords=PolyphonicRhythmScale
score.rhythmScale.instrument.PianoRHChords=PolyphonicRhythmScale
score.rhythmScale.instrument.Xylophone=PolyphonicRhythmScale

####################################################################
## transformers specified by part name (eg. score.transformer.Flute) 
## OR default (score.transformers.default)  as a comma delimited list
## ScaleTransformer preference is up, down, or random
##  ScaleTransformer.scale is the name of the scale formula
##  and is loaded from internal mapped scales (Scale class)
##  If not mapped internally, scale formula is loaded from
##  MongoDB collection or JSON file depending on the configured data source.
## See data/music/commonScaleFormulas.json
## 
####################################################################
score.transformers.default=org.dwbzen.music.transform.ScaleTransformer
score.transformers.ScaleTransformer.scale=Pentatonic minor
score.transformers.ScaleTransformer.scale.root=C
score.transformers.ScaleTransformer.preference=down

score.transformers.WoodBlocks=org.dwbzen.music.transform.ScaleTransformer
score.transformers.WoodBlocks.ScaleTransformer.scale=5-Line Unpitched Percussion
score.transformers.WoodBlocks.ScaleTransformer.root=E
score.transformers.WoodBlocks.ScaleTransformer.preference=random

score.transformers.Cowbell=org.dwbzen.music.transform.ScaleTransformer
score.transformers.Cowbell.ScaleTransformer.scale=2-Line Unpitched Percussion
score.transformers.Cowbell.ScaleTransformer.root=E
score.transformers.Cowbell.ScaleTransformer.preference=up

score.transformers.SnareDrum=org.dwbzen.music.transform.ScaleTransformer
score.transformers.SnareDrum.ScaleTransformer.scale=1-Line Unpitched Percussion
score.transformers.SnareDrum.ScaleTransformer.root=E
score.transformers.SnareDrum.ScaleTransformer.preference=random

score.transformers.Cymbals=org.dwbzen.music.transform.ScaleTransformer
score.transformers.Cymbals.ScaleTransformer.scale=1-Line Unpitched Percussion
score.transformers.Cymbals.ScaleTransformer.root=E
score.transformers.Cymbals.ScaleTransformer.preference=random

score.transformers.DoubleBass=org.dwbzen.music.transform.ScaleTransformer
score.transformers.DoubleBass.ScaleTransformer.scale=Hirajoshi Japan
score.transformers.DoubleBass.ScaleTransformer.root=A
score.transformers.DoubleBass.ScaleTransformer.preference=random


## ExplodeTransformer(s) specified by formula_name:frequency
##  where  formula_name matches the name of a built-in exploder:
##  EIGHT,EIGHT_RANDOM,EIGHT_RANDOM2,TRIPLET_RANDOM,QUINTUPLET_RANDOM
##  or matches the name in the MongoDB exploder_formulas collection.
## Format is comma-separated formulaName:frequency where: 0 <= frequency < 100
## sum(frequencies) must be <= 100
## to preserve ties in CHORD, always retain the original note in the chord (as the root)
## 
score.transformers.ExplodeTransformer.formulaNames.ARPEGIO=EIGHT:25,EIGHT_RANDOM:5,EIGHT_RANDOM2:5,TRIPLET_RANDOM:35,QUINTUPLET_RANDOM:20
score.transformers.ExplodeTransformer.formulaNames.ARPEGIO2=EIGHT:20,EIGHT_RANDOM:5,EIGHT_RANDOM2:5,TRIPLET_RANDOM:40,QUINTUPLET_RANDOM:30
score.transformers.ExplodeTransformer.formulaNames.CHORD=TRIPLE_RANDOM_CHORD:20,QUAD_RANDOM_CHORD:20,OCTAVE_DOUBLE_CHORD:30

##
## NOTE - Explode transformers introduces notes that are not 
## directly determined by the input data.
##
## Explode transformers to use by part name (instrument)
## can also specify for all, for example: score.transformers.all=org.dwbzen.music.transform.ExplodeTransformer
## Must include the type property as in: music.transform.ExplodeTransformer.all=ARPEGIO or CHORD
## The ExplodeTransformer will suss that out and configure itself from the properties.
## If 'all' is not specified it defaults to ARPEGIO.
## The one rule is - if you specify an 'all' exploder then cannot specify individual instrument exploder.
## To enable, uncomment the line(s) below.

## score.transformers.PianoLH=org.dwbzen.music.transform.ExplodeTransformer
## ExplodeTransformer.PianoLH=ARPEGIO
## score.transformers.PianoRH=org.dwbzen.music.transform.ExplodeTransformer
## ExplodeTransformer.PianoRH=CHORD
## ExplodeTransformer.PianoRH.breakChordTies=true

##
## ActiveMQ Configuration
##
activeMQ.user=admin
activeMQ.password=admin
activeMQ.url=failover://tcp://localhost:61616
## queues are created automatically; this is an example
activeMQ.queue=Piano.queue
activeMQ.deadletter=deadLetter.queue
activeMQ.component_name=activemq

#########################################################################
## Data Sources and Transport
## dataSource set globally, can be overridden for individual instruments
## valid dataSources: 
##   file - a points file in JSON, 
##   ifs - name of a builtin IteratedFunctionSystem
##   flame - a .flame file (created using Apophysis)
#########################################################################
dataSource=file
dataSource.transport=activeMQ

## resources for scales, scale formulas, chords and exploders
dataSource.scaleFormulas=common_scaleFormulas.json
dataSource.scaleFormulas.theoretical=theoretical_scaleFormulas.json
dataSource.scales=scales-C.json
dataSource.exploderFormulas=noteExploders.json
dataSource.chordFormulas=allChordFormulas.json
dataSource.chords=all_chords.json
##
## MongoDB data source
##
dataSource.mongodb.db.name=music
## the query strings for each instrument, in order, to execute to retrieve data from the desired DataSource
dataSource.mongodb.queryString=stats,point,message
dataSource.mongodb.connectionURI=mongodb://localhost:27017
dataSource.mongodb.scaleFormulas=scale_formulas
dataSource.mongodb.scales=scales_C
dataSource.mongodb.exploderFormulas=exploder_formulas
dataSource.mongodb.chordFormulas=chord_formulas
dataSource.mongodb.chords=chords

##
## File data source.
## Specify the source file path and data set for each instrument
## Uses JSON resources in data/music:
##	scales-C.json (for scales)
##	common_scaleFormula.json (for scale_formulas)
##  chords.json (for chord_formulas)
##
dataSource.file.path=bin/main/data/fractal/
## Used to filter JSON fractal file content
dataSource.file.queryString="type":"IFS","type":"Point2D","type":"message","type":"stats"

##
## random data source. range is inclusive on the low end, exclusive on the high end
## distribution can be Normal or none
## distribution, sigma and mu have 2 values for the x and y Point2D values
##
dataSource.random.dataSetName=random
dataSource.random.rangeX=[0.0,1.0]
dataSource.random.rangeY=[0.0,1.0]
dataSource.random.size=500
dataSource.random.distribution=normal,none
dataSource.random.sigma=1,1
dataSource.random.mu=0,0
dataSource.random.domainX=[-2.0,2.0]
dataSource.random.domainY=[-2.0,2.0]

## fields to return for each type of query
dataSource.fields.stats=n,minX,maxX,minY,maxY
dataSource.fields.point=Point2D

##############################################################################
## data source scoring configuration
## instrument data sets are data source agnostic and interpreted by the data source class
## If dataSource=file, this is the name of the JSON file (or builtin) in the configured dataSource.file.path
## If dataSource=mongodb,  this is the collection name in the configured MongoDB instance
## Fractal JSON files in src/main/resources/data/fractals :
##  sierpinski, sierpinski1, sierpinski2, sierpinski3, 
##  ifs2, ifs3, Apo7X_171203-2, Apo7X_170131, Apo7X_190212-02
##  ifs2-scaled, ifs3-scaled, Apo7X_171203-2-scaled, Apo7X_170131-scaled, Apo7X_190212-02-scaled
##
##  A data source set for an instrument overrides the global dataSource
##  format is dataSource.<instrument>.<type>=<spec>
##  where <type> :: file | ifs | flame
##  and <spec> file :: file path | resource file name (resources/data/fractal)
##              ifs :: IteratedFunctionSystem name, static implementation in  org.dwbzen.common.math.ifs.IfsSystems |
##                     name of a class that implements IIteratedFunctionSystem
##            flame :: complete patch to an Apophysis .flame file
###############################################################################
dataSource.PianoRH=Apo7X_190212-02_small
dataSource.PianoLH=Apo7X_170131_small
dataSource.PianoRHChords=Apo7X_190212-02_small
dataSource.PianoLHChords=Apo7X_170131_small

dataSource.Clarinet=Apo7X_190212-02_small
dataSource.Clarinet2=ifs3
dataSource.BassClarinet=random
dataSource.Bassoon=Apo7X_190212-02
dataSource.Flute=Apo7X_170131_small
dataSource.Flute2=ifs3
dataSource.Oboe=Apo7X_170131_small

dataSource.Violin=Apo7X_171203-2
dataSource.Violin2=sierpinski
dataSource.Viola=Apo7X_170131_small
dataSource.Cello=sierpinski
dataSource.DoubleBass=sierpinski3

dataSource.Soprano=Apo7X_171203-2
dataSource.Alto=Apo7X_170131
dataSource.Tenor=Apo7X_190212-02
dataSource.Bass=sierpinski

dataSource.Trombone=sierpinski

dataSource.Koto=Apo7X_170131_small
dataSource.TaishoKoto=Apo7X_170131_small
dataSource.Shakuhachi=ifs2
dataSource.Shamisen=ifs2

dataSource.Timpani=Apo7X_170131
dataSource.Xylophone=Apo7X_171203-2
dataSource.Xylophone2=Apo7X_171203-2
dataSource.Cymbals=sierpinski2
dataSource.SnareDrum=sierpinski
dataSource.WoodBlocks=sierpinski3
dataSource.Cowbell=sierpinski2
